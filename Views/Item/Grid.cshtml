@model ItemsViewModel



<style>
    /* Header styling */
    .page-title {
        font-size: 28px;
        color: #333;
        text-align: center;
        margin-top: 20px;
        margin-bottom: 20px;
        font-weight: bold;
    }

    /* Grid container styling */
    #itemsContainer {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* Create a 3-column grid */
        gap: 20px; /* Space between grid items */
        margin-top: 20px;
    }

    /* Card styling */
    .card {
        border: 1px solid #ddd;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        background-color: #fff;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .custom-image-size {
        width: 100%;
        height: 200px;
        object-fit: cover;
        transition: transform 0.2s;
    }

    /* Card body styling */
    .card-body {
        padding: 15px;
        background-color: #fafafa;
        width: 100%;
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 8px;
    }

    .card-text {
        color: #666;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .card a {
        text-decoration: none;
        color: inherit;
    }

    .card a:hover {
        color: #4CAF50;
    }

    /* Keyhole icon styling */
    .keyhole-icon {
        width: 20px; /* Adjusted size */
        height: auto;
        position: absolute;
        bottom: 10px;
        right: 10px;
    }

    .btn-secondary {
        background-color: #007bff; /* Bootstrap primary color */
        border: none;
        color: white;
        padding: 12px 30px; /* Increased padding for better appearance */
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s, transform 0.2s;
        cursor: pointer; /* Pointer cursor for better UX */
        font-size: 1rem; /* Font size */
    }

    .btn-secondary:hover {
        background-color: #0056b3; /* Darker blue for hover effect */
        transform: scale(1.05); /* Slight scale effect on hover */
    }

    /* Modal styling */
     /* Modal styles */
.modal {
    display: none; /* Hidden by default */
      justify-content: center; /* Center horizontally */
    align-items: center; /* Center vertically */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: hidden; /* Disable all scroll */
    background-color: rgba(0, 0, 0, 0.7); /* Darker background for better focus */
    padding-top: 150px; /* Space from the top */
}

.modal-content {
    background-color: #fff;
    margin: auto; /* Center the modal */
    padding: 30px; /* Increased padding for a spacious feel */
    border: none; /* No border */
    width: 80%; /* Wider width for larger screens */
    max-width: 800px; /* Increased maximum width for better manageability */
    height: 620px; /* Increased height for all modals */
    border-radius: 12px; /* Rounded corners for a modern look */
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5); /* Stronger shadow for depth */
    transition: all 0.3s ease; /* Smooth transition for all properties */
    overflow-y: auto; /* Enable vertical scrolling if content is too tall */
    overflow-x: hidden; /* Disable horizontal scrolling */
}

/* Product image styling */
.product-image {
    max-width: 100%;
    max-height: 300px; /* Adjust this value to control the image height */
    width: auto;
    height: auto;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* Keyhole icon */
.keyhole-icon {
    width: 30px;
    height: auto;
    position: absolute;
    bottom: 40px;
    right: 100px; 
}

/* Summary subtle style */
.summary-subtle {
    font-weight: bold;
    font-size: 1.1rem;
    cursor: pointer;
    margin-bottom: 10px;
    padding: 10px;
    color: #333;
    border-bottom: 1px solid #ccc;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.custom-image-size {
    height: 200px; /* Set the height you want */
    width: 100%; /* Makes sure the width adjusts to the container */
    object-fit: contain; /* Ensures the entire image is visible */
}

</style>

<!-- Content wrapper for dynamically loading grid -->
<div id="contentWrapper">
    <div id="itemsContainer">
        <!-- Initial items will load here dynamically -->
    </div>
</div>




<!-- Modal for displaying item details -->
<div id="itemModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div id="modalBody"></div>
    </div>
</div>

<!-- "View More" Button (for grid view only) -->
<div id="viewMoreContainer" style="text-align: center; margin-top: 20px;">
    <button id="viewMoreButton" class="btn-secondary" onclick="loadMoreItems()">View More</button>
</div>

<script>
    let currentPage = 1;
    const pageSize = 6;

    async function toggleView(view) {
        const gridButton = document.getElementById('gridButton');
        const tableButton = document.getElementById('tableButton');
        const contentWrapper = document.getElementById('contentWrapper');
        const viewMoreContainer = document.getElementById('viewMoreContainer');

        // Reset itemsContainer on view change
        contentWrapper.innerHTML = view === 'grid' ? `<div id="itemsContainer"></div>` : '';
        currentPage = 1;

        // Toggle active button style and show "View More" button only for grid view
        if (view === 'grid') {
            gridButton.classList.add('active');
            tableButton.classList.remove('active');
            viewMoreContainer.style.display = 'block';
            await loadMoreItems(true); // Initial load for grid
        } else if (view === 'table') {
            tableButton.classList.add('active');
            gridButton.classList.remove('active');
            viewMoreContainer.style.display = 'none';
            const tableResponse = await fetch('/Item/Table', { headers: { "X-Requested-With": "XMLHttpRequest" } });
            contentWrapper.innerHTML = await tableResponse.text();
        }
        initializeModals();
    }

    async function loadMoreItems(isInitialLoad = false) {
        if (isInitialLoad) {
            currentPage = 1;
            document.getElementById("itemsContainer").innerHTML = '';
        } else {
            currentPage++;
        }

        const response = await fetch(`/Item/Grid?page=${currentPage}&pageSize=${pageSize}`, { headers: { "X-Requested-With": "XMLHttpRequest" } });
        
        if (response.ok) {
            const data = await response.text();
            const parser = new DOMParser();
            const htmlDoc = parser.parseFromString(data, "text/html");
            const newItems = htmlDoc.querySelectorAll(".col");

            newItems.forEach(item => document.getElementById("itemsContainer").appendChild(item));

            if (newItems.length < pageSize) {
                document.getElementById("viewMoreContainer").style.display = 'none'; // Hide button if no more items
            }

            initializeModals();
        } else {
            console.error('Error loading more items:', response.statusText);
        }
    }

    function initializeModals() {
        const modal = document.getElementById("itemModal");
        const span = document.getElementsByClassName("close")[0];

        document.querySelectorAll('.open-modal').forEach(link => {
            link.onclick = function () {
                const itemId = this.getAttribute('data-item-id');
                fetch(`/Item/Details/${itemId}`)
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById("modalBody").innerHTML = data;
                        modal.style.display = "block";
                    })
                    .catch(error => console.error('Error loading item details:', error));
            };
        });

        span.onclick = function () { modal.style.display = "none"; };
        window.onclick = function (event) {
            if (event.target === modal) { modal.style.display = "none"; }
        };
    }

    // Initial load of the grid view with modals set up
    toggleView('grid');
    
    
    
</script>
